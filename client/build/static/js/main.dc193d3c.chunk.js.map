{"version":3,"sources":["generated/apollo-components.tsx","components/Card/Card.js","components/CardMenu/CardMenu.js","components/Navbar/Navbar.js","components/SearchResults/SearchResults.js","components/Restaurant/Restaurant.js","components/App/App.js","index.js"],"names":["MenuItemOrderByInput","RestaurantOrderByInput","UserOrderByInput","ViewRestaurantsAndMenusDocument","gql","ViewMenuItemsDocument","RestaurantByIdDocument","RestaurantSearchDocument","Cards","props","baseOptions","ApolloReactHooks","data","loading","error","restaurants","map","restaurant","Card","key","id","style","width","display","margin","Body","Img","variant","src","city","Title","name","Subtitle","className","state","Text","to","Link","CardMenus","menuItems","menuitem","description","Navbars","React","useState","setRestaurant","Navbar","bg","Brand","href","Nav","Form","inline","onSubmit","event","preventDefault","FormControl","value","onChange","target","type","placeholder","Button","SearchResults","term","useParams","variables","search","Restaurant","params","menuitems","Fragment","maxWidth","ListGroup","Item","App","path","exact","component","client","ApolloClient","uri","process","root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc193d3c.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport type AggregateMenuItem = {\n   __typename?: 'AggregateMenuItem',\n  count: Scalars['Int'],\n};\n\nexport type AggregateRestaurant = {\n   __typename?: 'AggregateRestaurant',\n  count: Scalars['Int'],\n};\n\nexport type AggregateUser = {\n   __typename?: 'AggregateUser',\n  count: Scalars['Int'],\n};\n\n\nexport type MenuItem = {\n   __typename?: 'MenuItem',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  description?: Maybe<Scalars['String']>,\n  restaurant: Restaurant,\n};\n\nexport type MenuItemConnection = {\n   __typename?: 'MenuItemConnection',\n  pageInfo: PageInfo,\n  edges: Array<MenuItemEdge>,\n  aggregate: AggregateMenuItem,\n};\n\nexport type MenuItemEdge = {\n   __typename?: 'MenuItemEdge',\n  node: MenuItem,\n  cursor: Scalars['String'],\n};\n\nexport enum MenuItemOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  DescriptionAsc = 'description_ASC',\n  DescriptionDesc = 'description_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type MenuItemWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n  description_not?: Maybe<Scalars['String']>,\n  description_in?: Maybe<Array<Scalars['String']>>,\n  description_not_in?: Maybe<Array<Scalars['String']>>,\n  description_lt?: Maybe<Scalars['String']>,\n  description_lte?: Maybe<Scalars['String']>,\n  description_gt?: Maybe<Scalars['String']>,\n  description_gte?: Maybe<Scalars['String']>,\n  description_contains?: Maybe<Scalars['String']>,\n  description_not_contains?: Maybe<Scalars['String']>,\n  description_starts_with?: Maybe<Scalars['String']>,\n  description_not_starts_with?: Maybe<Scalars['String']>,\n  description_ends_with?: Maybe<Scalars['String']>,\n  description_not_ends_with?: Maybe<Scalars['String']>,\n  restaurant?: Maybe<RestaurantWhereInput>,\n  AND?: Maybe<Array<MenuItemWhereInput>>,\n  OR?: Maybe<Array<MenuItemWhereInput>>,\n  NOT?: Maybe<Array<MenuItemWhereInput>>,\n};\n\nexport type MenuItemWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  deleteRestaurant?: Maybe<Restaurant>,\n};\n\n\nexport type MutationDeleteRestaurantArgs = {\n  where: RestaurantWhereUniqueInput\n};\n\nexport type PageInfo = {\n   __typename?: 'PageInfo',\n  hasNextPage: Scalars['Boolean'],\n  hasPreviousPage: Scalars['Boolean'],\n  startCursor?: Maybe<Scalars['String']>,\n  endCursor?: Maybe<Scalars['String']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  user?: Maybe<User>,\n  users: Array<User>,\n  usersConnection: UserConnection,\n  restaurant?: Maybe<Restaurant>,\n  restaurants: Array<Restaurant>,\n  restaurantsConnection: RestaurantConnection,\n  menuItem?: Maybe<MenuItem>,\n  menuItems: Array<MenuItem>,\n  menuItemsConnection: MenuItemConnection,\n};\n\n\nexport type QueryUserArgs = {\n  where: UserWhereUniqueInput\n};\n\n\nexport type QueryUsersArgs = {\n  where?: Maybe<UserWhereInput>,\n  orderBy?: Maybe<UserOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryUsersConnectionArgs = {\n  where?: Maybe<UserWhereInput>,\n  orderBy?: Maybe<UserOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryRestaurantArgs = {\n  where: RestaurantWhereUniqueInput\n};\n\n\nexport type QueryRestaurantsArgs = {\n  where?: Maybe<RestaurantWhereInput>,\n  orderBy?: Maybe<RestaurantOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryRestaurantsConnectionArgs = {\n  where?: Maybe<RestaurantWhereInput>,\n  orderBy?: Maybe<RestaurantOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryMenuItemArgs = {\n  where: MenuItemWhereUniqueInput\n};\n\n\nexport type QueryMenuItemsArgs = {\n  where?: Maybe<MenuItemWhereInput>,\n  orderBy?: Maybe<MenuItemOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryMenuItemsConnectionArgs = {\n  where?: Maybe<MenuItemWhereInput>,\n  orderBy?: Maybe<MenuItemOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type Restaurant = {\n   __typename?: 'Restaurant',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  description: Scalars['String'],\n  city: Scalars['String'],\n  state: Scalars['String'],\n  numMenuItems?: Maybe<Scalars['Int']>,\n  menuitems?: Maybe<Array<MenuItem>>,\n  welcome?: Maybe<Scalars['String']>,\n  menuItemsCount?: Maybe<Scalars['Int']>,\n};\n\n\nexport type RestaurantMenuitemsArgs = {\n  where?: Maybe<MenuItemWhereInput>,\n  orderBy?: Maybe<MenuItemOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type RestaurantConnection = {\n   __typename?: 'RestaurantConnection',\n  pageInfo: PageInfo,\n  edges: Array<RestaurantEdge>,\n  aggregate: AggregateRestaurant,\n};\n\nexport type RestaurantEdge = {\n   __typename?: 'RestaurantEdge',\n  node: Restaurant,\n  cursor: Scalars['String'],\n};\n\nexport enum RestaurantOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  DescriptionAsc = 'description_ASC',\n  DescriptionDesc = 'description_DESC',\n  CityAsc = 'city_ASC',\n  CityDesc = 'city_DESC',\n  StateAsc = 'state_ASC',\n  StateDesc = 'state_DESC',\n  NumMenuItemsAsc = 'numMenuItems_ASC',\n  NumMenuItemsDesc = 'numMenuItems_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type RestaurantWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n  description_not?: Maybe<Scalars['String']>,\n  description_in?: Maybe<Array<Scalars['String']>>,\n  description_not_in?: Maybe<Array<Scalars['String']>>,\n  description_lt?: Maybe<Scalars['String']>,\n  description_lte?: Maybe<Scalars['String']>,\n  description_gt?: Maybe<Scalars['String']>,\n  description_gte?: Maybe<Scalars['String']>,\n  description_contains?: Maybe<Scalars['String']>,\n  description_not_contains?: Maybe<Scalars['String']>,\n  description_starts_with?: Maybe<Scalars['String']>,\n  description_not_starts_with?: Maybe<Scalars['String']>,\n  description_ends_with?: Maybe<Scalars['String']>,\n  description_not_ends_with?: Maybe<Scalars['String']>,\n  city?: Maybe<Scalars['String']>,\n  city_not?: Maybe<Scalars['String']>,\n  city_in?: Maybe<Array<Scalars['String']>>,\n  city_not_in?: Maybe<Array<Scalars['String']>>,\n  city_lt?: Maybe<Scalars['String']>,\n  city_lte?: Maybe<Scalars['String']>,\n  city_gt?: Maybe<Scalars['String']>,\n  city_gte?: Maybe<Scalars['String']>,\n  city_contains?: Maybe<Scalars['String']>,\n  city_not_contains?: Maybe<Scalars['String']>,\n  city_starts_with?: Maybe<Scalars['String']>,\n  city_not_starts_with?: Maybe<Scalars['String']>,\n  city_ends_with?: Maybe<Scalars['String']>,\n  city_not_ends_with?: Maybe<Scalars['String']>,\n  state?: Maybe<Scalars['String']>,\n  state_not?: Maybe<Scalars['String']>,\n  state_in?: Maybe<Array<Scalars['String']>>,\n  state_not_in?: Maybe<Array<Scalars['String']>>,\n  state_lt?: Maybe<Scalars['String']>,\n  state_lte?: Maybe<Scalars['String']>,\n  state_gt?: Maybe<Scalars['String']>,\n  state_gte?: Maybe<Scalars['String']>,\n  state_contains?: Maybe<Scalars['String']>,\n  state_not_contains?: Maybe<Scalars['String']>,\n  state_starts_with?: Maybe<Scalars['String']>,\n  state_not_starts_with?: Maybe<Scalars['String']>,\n  state_ends_with?: Maybe<Scalars['String']>,\n  state_not_ends_with?: Maybe<Scalars['String']>,\n  numMenuItems?: Maybe<Scalars['Int']>,\n  numMenuItems_not?: Maybe<Scalars['Int']>,\n  numMenuItems_in?: Maybe<Array<Scalars['Int']>>,\n  numMenuItems_not_in?: Maybe<Array<Scalars['Int']>>,\n  numMenuItems_lt?: Maybe<Scalars['Int']>,\n  numMenuItems_lte?: Maybe<Scalars['Int']>,\n  numMenuItems_gt?: Maybe<Scalars['Int']>,\n  numMenuItems_gte?: Maybe<Scalars['Int']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  menuitems_every?: Maybe<MenuItemWhereInput>,\n  menuitems_some?: Maybe<MenuItemWhereInput>,\n  menuitems_none?: Maybe<MenuItemWhereInput>,\n  AND?: Maybe<Array<RestaurantWhereInput>>,\n  OR?: Maybe<Array<RestaurantWhereInput>>,\n  NOT?: Maybe<Array<RestaurantWhereInput>>,\n};\n\nexport type RestaurantWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n};\n\nexport type UserConnection = {\n   __typename?: 'UserConnection',\n  pageInfo: PageInfo,\n  edges: Array<UserEdge>,\n  aggregate: AggregateUser,\n};\n\nexport type UserEdge = {\n   __typename?: 'UserEdge',\n  node: User,\n  cursor: Scalars['String'],\n};\n\nexport enum UserOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type UserWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  AND?: Maybe<Array<UserWhereInput>>,\n  OR?: Maybe<Array<UserWhereInput>>,\n  NOT?: Maybe<Array<UserWhereInput>>,\n};\n\nexport type UserWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n};\n\nexport type ViewRestaurantsAndMenusQueryVariables = {};\n\n\nexport type ViewRestaurantsAndMenusQuery = (\n  { __typename?: 'Query' }\n  & { restaurants: Array<(\n    { __typename?: 'Restaurant' }\n    & Pick<Restaurant, 'city' | 'state' | 'name' | 'description' | 'id'>\n    & { menuitems: Maybe<Array<(\n      { __typename?: 'MenuItem' }\n      & Pick<MenuItem, 'name' | 'description'>\n    )>> }\n  )> }\n);\n\nexport type ListRestaurantsByStateQueryVariables = {\n  state: Scalars['String']\n};\n\n\nexport type ListRestaurantsByStateQuery = (\n  { __typename?: 'Query' }\n  & { restaurants: Array<(\n    { __typename?: 'Restaurant' }\n    & Pick<Restaurant, 'name' | 'state' | 'city'>\n    & { menuitems: Maybe<Array<(\n      { __typename?: 'MenuItem' }\n      & Pick<MenuItem, 'name' | 'description'>\n    )>> }\n  )> }\n);\n\nexport type ListRestaurantsByCityQueryVariables = {\n  city: Scalars['String']\n};\n\n\nexport type ListRestaurantsByCityQuery = (\n  { __typename?: 'Query' }\n  & { restaurants: Array<(\n    { __typename?: 'Restaurant' }\n    & Pick<Restaurant, 'name' | 'state' | 'city'>\n    & { menuitems: Maybe<Array<(\n      { __typename?: 'MenuItem' }\n      & Pick<MenuItem, 'name' | 'description'>\n    )>> }\n  )> }\n);\n\nexport type MyRestaurantQueryVariables = {\n  name: Scalars['String']\n};\n\n\nexport type MyRestaurantQuery = (\n  { __typename?: 'Query' }\n  & { restaurant: Maybe<(\n    { __typename?: 'Restaurant' }\n    & Pick<Restaurant, 'name' | 'description' | 'city' | 'state'>\n    & { menuitems: Maybe<Array<(\n      { __typename?: 'MenuItem' }\n      & Pick<MenuItem, 'name' | 'description'>\n    )>> }\n  )> }\n);\n\nexport type ViewMenuItemsQueryVariables = {};\n\n\nexport type ViewMenuItemsQuery = (\n  { __typename?: 'Query' }\n  & { menuItems: Array<(\n    { __typename?: 'MenuItem' }\n    & Pick<MenuItem, 'name' | 'description'>\n  )> }\n);\n\nexport type RestaurantByIdQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type RestaurantByIdQuery = (\n  { __typename?: 'Query' }\n  & { restaurant: Maybe<(\n    { __typename?: 'Restaurant' }\n    & Pick<Restaurant, 'name' | 'description' | 'city' | 'state'>\n    & { menuitems: Maybe<Array<(\n      { __typename?: 'MenuItem' }\n      & Pick<MenuItem, 'name' | 'description'>\n    )>> }\n  )> }\n);\n\nexport type RestaurantSearchQueryVariables = {\n  search: Scalars['String']\n};\n\n\nexport type RestaurantSearchQuery = (\n  { __typename?: 'Query' }\n  & { restaurants: Array<(\n    { __typename?: 'Restaurant' }\n    & Pick<Restaurant, 'id' | 'name' | 'description' | 'state' | 'city'>\n  )> }\n);\n\n\nexport const ViewRestaurantsAndMenusDocument = gql`\n    query viewRestaurantsAndMenus {\n  restaurants {\n    city\n    state\n    name\n    description\n    id\n    menuitems {\n      name\n      description\n    }\n  }\n}\n    `;\nexport type ViewRestaurantsAndMenusComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ViewRestaurantsAndMenusQuery, ViewRestaurantsAndMenusQueryVariables>, 'query'>;\n\n    export const ViewRestaurantsAndMenusComponent = (props: ViewRestaurantsAndMenusComponentProps) => (\n      <ApolloReactComponents.Query<ViewRestaurantsAndMenusQuery, ViewRestaurantsAndMenusQueryVariables> query={ViewRestaurantsAndMenusDocument} {...props} />\n    );\n    \nexport type ViewRestaurantsAndMenusProps<TChildProps = {}> = ApolloReactHoc.DataProps<ViewRestaurantsAndMenusQuery, ViewRestaurantsAndMenusQueryVariables> | TChildProps;\nexport function withViewRestaurantsAndMenus<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  ViewRestaurantsAndMenusQuery,\n  ViewRestaurantsAndMenusQueryVariables,\n  ViewRestaurantsAndMenusProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, ViewRestaurantsAndMenusQuery, ViewRestaurantsAndMenusQueryVariables, ViewRestaurantsAndMenusProps<TChildProps>>(ViewRestaurantsAndMenusDocument, {\n      alias: 'viewRestaurantsAndMenus',\n      ...operationOptions\n    });\n};\n\n/**\n * __useViewRestaurantsAndMenusQuery__\n *\n * To run a query within a React component, call `useViewRestaurantsAndMenusQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewRestaurantsAndMenusQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewRestaurantsAndMenusQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useViewRestaurantsAndMenusQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ViewRestaurantsAndMenusQuery, ViewRestaurantsAndMenusQueryVariables>) {\n        return ApolloReactHooks.useQuery<ViewRestaurantsAndMenusQuery, ViewRestaurantsAndMenusQueryVariables>(ViewRestaurantsAndMenusDocument, baseOptions);\n      }\nexport function useViewRestaurantsAndMenusLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ViewRestaurantsAndMenusQuery, ViewRestaurantsAndMenusQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ViewRestaurantsAndMenusQuery, ViewRestaurantsAndMenusQueryVariables>(ViewRestaurantsAndMenusDocument, baseOptions);\n        }\nexport type ViewRestaurantsAndMenusQueryHookResult = ReturnType<typeof useViewRestaurantsAndMenusQuery>;\nexport type ViewRestaurantsAndMenusLazyQueryHookResult = ReturnType<typeof useViewRestaurantsAndMenusLazyQuery>;\nexport type ViewRestaurantsAndMenusQueryResult = ApolloReactCommon.QueryResult<ViewRestaurantsAndMenusQuery, ViewRestaurantsAndMenusQueryVariables>;\nexport const ListRestaurantsByStateDocument = gql`\n    query listRestaurantsByState($state: String!) {\n  restaurants(where: {state: $state}) {\n    name\n    state\n    city\n    menuitems {\n      name\n      description\n    }\n  }\n}\n    `;\nexport type ListRestaurantsByStateComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ListRestaurantsByStateQuery, ListRestaurantsByStateQueryVariables>, 'query'> & ({ variables: ListRestaurantsByStateQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const ListRestaurantsByStateComponent = (props: ListRestaurantsByStateComponentProps) => (\n      <ApolloReactComponents.Query<ListRestaurantsByStateQuery, ListRestaurantsByStateQueryVariables> query={ListRestaurantsByStateDocument} {...props} />\n    );\n    \nexport type ListRestaurantsByStateProps<TChildProps = {}> = ApolloReactHoc.DataProps<ListRestaurantsByStateQuery, ListRestaurantsByStateQueryVariables> | TChildProps;\nexport function withListRestaurantsByState<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  ListRestaurantsByStateQuery,\n  ListRestaurantsByStateQueryVariables,\n  ListRestaurantsByStateProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, ListRestaurantsByStateQuery, ListRestaurantsByStateQueryVariables, ListRestaurantsByStateProps<TChildProps>>(ListRestaurantsByStateDocument, {\n      alias: 'listRestaurantsByState',\n      ...operationOptions\n    });\n};\n\n/**\n * __useListRestaurantsByStateQuery__\n *\n * To run a query within a React component, call `useListRestaurantsByStateQuery` and pass it any options that fit your needs.\n * When your component renders, `useListRestaurantsByStateQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useListRestaurantsByStateQuery({\n *   variables: {\n *      state: // value for 'state'\n *   },\n * });\n */\nexport function useListRestaurantsByStateQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ListRestaurantsByStateQuery, ListRestaurantsByStateQueryVariables>) {\n        return ApolloReactHooks.useQuery<ListRestaurantsByStateQuery, ListRestaurantsByStateQueryVariables>(ListRestaurantsByStateDocument, baseOptions);\n      }\nexport function useListRestaurantsByStateLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ListRestaurantsByStateQuery, ListRestaurantsByStateQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ListRestaurantsByStateQuery, ListRestaurantsByStateQueryVariables>(ListRestaurantsByStateDocument, baseOptions);\n        }\nexport type ListRestaurantsByStateQueryHookResult = ReturnType<typeof useListRestaurantsByStateQuery>;\nexport type ListRestaurantsByStateLazyQueryHookResult = ReturnType<typeof useListRestaurantsByStateLazyQuery>;\nexport type ListRestaurantsByStateQueryResult = ApolloReactCommon.QueryResult<ListRestaurantsByStateQuery, ListRestaurantsByStateQueryVariables>;\nexport const ListRestaurantsByCityDocument = gql`\n    query listRestaurantsByCity($city: String!) {\n  restaurants(where: {city: $city}) {\n    name\n    state\n    city\n    menuitems {\n      name\n      description\n    }\n  }\n}\n    `;\nexport type ListRestaurantsByCityComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ListRestaurantsByCityQuery, ListRestaurantsByCityQueryVariables>, 'query'> & ({ variables: ListRestaurantsByCityQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const ListRestaurantsByCityComponent = (props: ListRestaurantsByCityComponentProps) => (\n      <ApolloReactComponents.Query<ListRestaurantsByCityQuery, ListRestaurantsByCityQueryVariables> query={ListRestaurantsByCityDocument} {...props} />\n    );\n    \nexport type ListRestaurantsByCityProps<TChildProps = {}> = ApolloReactHoc.DataProps<ListRestaurantsByCityQuery, ListRestaurantsByCityQueryVariables> | TChildProps;\nexport function withListRestaurantsByCity<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  ListRestaurantsByCityQuery,\n  ListRestaurantsByCityQueryVariables,\n  ListRestaurantsByCityProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, ListRestaurantsByCityQuery, ListRestaurantsByCityQueryVariables, ListRestaurantsByCityProps<TChildProps>>(ListRestaurantsByCityDocument, {\n      alias: 'listRestaurantsByCity',\n      ...operationOptions\n    });\n};\n\n/**\n * __useListRestaurantsByCityQuery__\n *\n * To run a query within a React component, call `useListRestaurantsByCityQuery` and pass it any options that fit your needs.\n * When your component renders, `useListRestaurantsByCityQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useListRestaurantsByCityQuery({\n *   variables: {\n *      city: // value for 'city'\n *   },\n * });\n */\nexport function useListRestaurantsByCityQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ListRestaurantsByCityQuery, ListRestaurantsByCityQueryVariables>) {\n        return ApolloReactHooks.useQuery<ListRestaurantsByCityQuery, ListRestaurantsByCityQueryVariables>(ListRestaurantsByCityDocument, baseOptions);\n      }\nexport function useListRestaurantsByCityLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ListRestaurantsByCityQuery, ListRestaurantsByCityQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ListRestaurantsByCityQuery, ListRestaurantsByCityQueryVariables>(ListRestaurantsByCityDocument, baseOptions);\n        }\nexport type ListRestaurantsByCityQueryHookResult = ReturnType<typeof useListRestaurantsByCityQuery>;\nexport type ListRestaurantsByCityLazyQueryHookResult = ReturnType<typeof useListRestaurantsByCityLazyQuery>;\nexport type ListRestaurantsByCityQueryResult = ApolloReactCommon.QueryResult<ListRestaurantsByCityQuery, ListRestaurantsByCityQueryVariables>;\nexport const MyRestaurantDocument = gql`\n    query myRestaurant($name: String!) {\n  restaurant(where: {name: $name}) {\n    name\n    description\n    city\n    state\n    menuitems {\n      name\n      description\n    }\n  }\n}\n    `;\nexport type MyRestaurantComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<MyRestaurantQuery, MyRestaurantQueryVariables>, 'query'> & ({ variables: MyRestaurantQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const MyRestaurantComponent = (props: MyRestaurantComponentProps) => (\n      <ApolloReactComponents.Query<MyRestaurantQuery, MyRestaurantQueryVariables> query={MyRestaurantDocument} {...props} />\n    );\n    \nexport type MyRestaurantProps<TChildProps = {}> = ApolloReactHoc.DataProps<MyRestaurantQuery, MyRestaurantQueryVariables> | TChildProps;\nexport function withMyRestaurant<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  MyRestaurantQuery,\n  MyRestaurantQueryVariables,\n  MyRestaurantProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, MyRestaurantQuery, MyRestaurantQueryVariables, MyRestaurantProps<TChildProps>>(MyRestaurantDocument, {\n      alias: 'myRestaurant',\n      ...operationOptions\n    });\n};\n\n/**\n * __useMyRestaurantQuery__\n *\n * To run a query within a React component, call `useMyRestaurantQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyRestaurantQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyRestaurantQuery({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useMyRestaurantQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MyRestaurantQuery, MyRestaurantQueryVariables>) {\n        return ApolloReactHooks.useQuery<MyRestaurantQuery, MyRestaurantQueryVariables>(MyRestaurantDocument, baseOptions);\n      }\nexport function useMyRestaurantLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyRestaurantQuery, MyRestaurantQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MyRestaurantQuery, MyRestaurantQueryVariables>(MyRestaurantDocument, baseOptions);\n        }\nexport type MyRestaurantQueryHookResult = ReturnType<typeof useMyRestaurantQuery>;\nexport type MyRestaurantLazyQueryHookResult = ReturnType<typeof useMyRestaurantLazyQuery>;\nexport type MyRestaurantQueryResult = ApolloReactCommon.QueryResult<MyRestaurantQuery, MyRestaurantQueryVariables>;\nexport const ViewMenuItemsDocument = gql`\n    query viewMenuItems {\n  menuItems {\n    name\n    description\n  }\n}\n    `;\nexport type ViewMenuItemsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ViewMenuItemsQuery, ViewMenuItemsQueryVariables>, 'query'>;\n\n    export const ViewMenuItemsComponent = (props: ViewMenuItemsComponentProps) => (\n      <ApolloReactComponents.Query<ViewMenuItemsQuery, ViewMenuItemsQueryVariables> query={ViewMenuItemsDocument} {...props} />\n    );\n    \nexport type ViewMenuItemsProps<TChildProps = {}> = ApolloReactHoc.DataProps<ViewMenuItemsQuery, ViewMenuItemsQueryVariables> | TChildProps;\nexport function withViewMenuItems<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  ViewMenuItemsQuery,\n  ViewMenuItemsQueryVariables,\n  ViewMenuItemsProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, ViewMenuItemsQuery, ViewMenuItemsQueryVariables, ViewMenuItemsProps<TChildProps>>(ViewMenuItemsDocument, {\n      alias: 'viewMenuItems',\n      ...operationOptions\n    });\n};\n\n/**\n * __useViewMenuItemsQuery__\n *\n * To run a query within a React component, call `useViewMenuItemsQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewMenuItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewMenuItemsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useViewMenuItemsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ViewMenuItemsQuery, ViewMenuItemsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ViewMenuItemsQuery, ViewMenuItemsQueryVariables>(ViewMenuItemsDocument, baseOptions);\n      }\nexport function useViewMenuItemsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ViewMenuItemsQuery, ViewMenuItemsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ViewMenuItemsQuery, ViewMenuItemsQueryVariables>(ViewMenuItemsDocument, baseOptions);\n        }\nexport type ViewMenuItemsQueryHookResult = ReturnType<typeof useViewMenuItemsQuery>;\nexport type ViewMenuItemsLazyQueryHookResult = ReturnType<typeof useViewMenuItemsLazyQuery>;\nexport type ViewMenuItemsQueryResult = ApolloReactCommon.QueryResult<ViewMenuItemsQuery, ViewMenuItemsQueryVariables>;\nexport const RestaurantByIdDocument = gql`\n    query RestaurantByID($id: ID!) {\n  restaurant(where: {id: $id}) {\n    name\n    description\n    city\n    state\n    menuitems {\n      name\n      description\n    }\n  }\n}\n    `;\nexport type RestaurantByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<RestaurantByIdQuery, RestaurantByIdQueryVariables>, 'query'> & ({ variables: RestaurantByIdQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const RestaurantByIdComponent = (props: RestaurantByIdComponentProps) => (\n      <ApolloReactComponents.Query<RestaurantByIdQuery, RestaurantByIdQueryVariables> query={RestaurantByIdDocument} {...props} />\n    );\n    \nexport type RestaurantByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<RestaurantByIdQuery, RestaurantByIdQueryVariables> | TChildProps;\nexport function withRestaurantById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  RestaurantByIdQuery,\n  RestaurantByIdQueryVariables,\n  RestaurantByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, RestaurantByIdQuery, RestaurantByIdQueryVariables, RestaurantByIdProps<TChildProps>>(RestaurantByIdDocument, {\n      alias: 'restaurantById',\n      ...operationOptions\n    });\n};\n\n/**\n * __useRestaurantByIdQuery__\n *\n * To run a query within a React component, call `useRestaurantByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useRestaurantByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRestaurantByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRestaurantByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RestaurantByIdQuery, RestaurantByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<RestaurantByIdQuery, RestaurantByIdQueryVariables>(RestaurantByIdDocument, baseOptions);\n      }\nexport function useRestaurantByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RestaurantByIdQuery, RestaurantByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<RestaurantByIdQuery, RestaurantByIdQueryVariables>(RestaurantByIdDocument, baseOptions);\n        }\nexport type RestaurantByIdQueryHookResult = ReturnType<typeof useRestaurantByIdQuery>;\nexport type RestaurantByIdLazyQueryHookResult = ReturnType<typeof useRestaurantByIdLazyQuery>;\nexport type RestaurantByIdQueryResult = ApolloReactCommon.QueryResult<RestaurantByIdQuery, RestaurantByIdQueryVariables>;\nexport const RestaurantSearchDocument = gql`\n    query restaurantSearch($search: String!) {\n  restaurants(where: {OR: [{name_contains: $search}, {city_contains: $search}, {state_contains: $search}]}) {\n    id\n    name\n    description\n    state\n    city\n  }\n}\n    `;\nexport type RestaurantSearchComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<RestaurantSearchQuery, RestaurantSearchQueryVariables>, 'query'> & ({ variables: RestaurantSearchQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const RestaurantSearchComponent = (props: RestaurantSearchComponentProps) => (\n      <ApolloReactComponents.Query<RestaurantSearchQuery, RestaurantSearchQueryVariables> query={RestaurantSearchDocument} {...props} />\n    );\n    \nexport type RestaurantSearchProps<TChildProps = {}> = ApolloReactHoc.DataProps<RestaurantSearchQuery, RestaurantSearchQueryVariables> | TChildProps;\nexport function withRestaurantSearch<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  RestaurantSearchQuery,\n  RestaurantSearchQueryVariables,\n  RestaurantSearchProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, RestaurantSearchQuery, RestaurantSearchQueryVariables, RestaurantSearchProps<TChildProps>>(RestaurantSearchDocument, {\n      alias: 'restaurantSearch',\n      ...operationOptions\n    });\n};\n\n/**\n * __useRestaurantSearchQuery__\n *\n * To run a query within a React component, call `useRestaurantSearchQuery` and pass it any options that fit your needs.\n * When your component renders, `useRestaurantSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRestaurantSearchQuery({\n *   variables: {\n *      search: // value for 'search'\n *   },\n * });\n */\nexport function useRestaurantSearchQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RestaurantSearchQuery, RestaurantSearchQueryVariables>) {\n        return ApolloReactHooks.useQuery<RestaurantSearchQuery, RestaurantSearchQueryVariables>(RestaurantSearchDocument, baseOptions);\n      }\nexport function useRestaurantSearchLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RestaurantSearchQuery, RestaurantSearchQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<RestaurantSearchQuery, RestaurantSearchQueryVariables>(RestaurantSearchDocument, baseOptions);\n        }\nexport type RestaurantSearchQueryHookResult = ReturnType<typeof useRestaurantSearchQuery>;\nexport type RestaurantSearchLazyQueryHookResult = ReturnType<typeof useRestaurantSearchLazyQuery>;\nexport type RestaurantSearchQueryResult = ApolloReactCommon.QueryResult<RestaurantSearchQuery, RestaurantSearchQueryVariables>;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport {useViewRestaurantsAndMenusQuery} from '../../generated/apollo-components';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nfunction Cards(props) {\n\n    const {data, loading, error} = useViewRestaurantsAndMenusQuery()\n\n    if (loading) return 'loading'\n    if (error) return 'error'\n\n    return (\n        data.restaurants.map(restaurant => (\n            <Card key={restaurant.id} style={{ width: '390px', display: 'inline-block', margin: '20px' }}>\n                <Card.Body>\n                    <Card.Img variant=\"top\" src={`https://source.unsplash.com/600x400/?${restaurant.city}`} />\n                    <Card.Title>{restaurant.name}</Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">{restaurant.city}, {restaurant.state}</Card.Subtitle>\n                    <Card.Text>\n                        HurrDurr this is a Restaurant\n                    </Card.Text>\n                    <LinkContainer to={`/restaurants/${restaurant.id}`}>\n                        <Card.Link>Restaurant Page</Card.Link>\n                    </LinkContainer>\n                </Card.Body>\n            </Card>\n        )));\n    \n}\n\nexport default Cards;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport {useViewMenuItemsQuery} from '../../generated/apollo-components';\n\nfunction CardMenus(props) {\n\n    const {data, loading, error} = useViewMenuItemsQuery()\n\n    if (loading) return 'loading'\n    if (error) return 'error'\n\n    return (\n        data.menuItems.map(menuitem => (\n            <Card key={menuitem.id} style={{ width: '390px', display: 'inline-block', margin: '20px' }}>\n                <Card.Body>\n                    <Card.Img variant=\"top\" src={`https://source.unsplash.com/600x400/?${menuitem.name}`} />\n                    <Card.Title>{menuitem.name}</Card.Title>\n                    <Card.Text>\n                        {menuitem.description}\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        )));\n    \n}\n\nexport default CardMenus;","import React from 'react';\nimport {Nav, Form, FormControl, Button, Navbar} from 'react-bootstrap'\nimport {Link} from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap';\n\nfunction Navbars(props) {\n    const [restaurant,setRestaurant] = React.useState('')\n\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">100 Hipster Food Consumption Spots</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <LinkContainer to=\"/restaurants\">\n                    <Nav.Link>Restaurants</Nav.Link>\n                </LinkContainer>\n                <LinkContainer to=\"/menuitems\">\n                    <Nav.Link>Menu Items</Nav.Link>\n                </LinkContainer>\n            </Nav>\n            <Form inline onSubmit={(event) => event.preventDefault()}>\n                <FormControl value={restaurant} onChange={(event) => setRestaurant(event.target.value)} type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                <Link to={`/search/${restaurant}`}>\n                <Button variant=\"outline-info\">\n                    Search\n                </Button>\n                </Link>\n            </Form>\n        </Navbar>\n        );\n    \n}\n\nexport default Navbars;","import React from 'react'\nimport {useParams} from 'react-router-dom'\nimport Card from 'react-bootstrap/Card';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport {useRestaurantSearchQuery} from '../../generated/apollo-components'\n\nconst SearchResults = () => {\n    const {term} = useParams()\n\n    const {data, loading, error} = useRestaurantSearchQuery({\n        variables: {\n            search: term\n        }\n    })\n\n    if (loading) return 'loading'\n    if (error) return 'error'\n\n    return (\n        data.restaurants.map(restaurant => (\n            <Card key={restaurant.id} style={{ width: '390px', display: 'inline-block', margin: '20px' }}>\n            <Card.Body>\n                <Card.Img variant=\"top\" src={`https://source.unsplash.com/600x400/?${restaurant.city}`} />\n                <Card.Title>{restaurant.name}</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">{restaurant.city}, {restaurant.state}</Card.Subtitle>\n                <LinkContainer to={`/restaurants/${restaurant.id}`}>\n        <Card.Link>Restaurant Page</Card.Link>\n                </LinkContainer>\n            </Card.Body>\n        </Card>\n        )));\n}\n\nexport default SearchResults;\n\n        // <div>\n        //     {data.restaurants.map(restaurant => (\n        //         <div key={restaurant.id}>{restaurant.name}</div>\n        //     ))}\n        // </div>","import React from 'react'\nimport {useRestaurantByIdQuery} from '../../generated/apollo-components'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport { useParams, Link } from 'react-router-dom'\n\nconst Restaurant = () => {\n    const params = useParams()\n    // any js\n    const {data, loading, error} = useRestaurantByIdQuery({\n        variables: {\n            id: params.id\n        }\n    })\n\n    if (loading) return 'loading'\n    if (error) return 'error'\n\n    const {name, description, city, state, menuitems} = data.restaurant\n\n    return (\n        <React.Fragment>\n\n        <center>\n                <div>\n            <br />\n                {name}\n            <br />\n                {city}, {state}\n            <br />\n                <img src={`https://source.unsplash.com/800x400/?${city}`} />\n            <br />\n                </div>\n        </center>\n        <p style={{maxWidth: '720px', margin: '0 auto'}}>\n            {description}\n        </p>\n            <div>\n                <ListGroup>\n                    {menuitems.map(menuitem => (\n                    <ListGroup.Item key={menuitem.id}>{menuitem.name}\n                        <br />\n                            <img src={`https://source.unsplash.com/400x200/?${menuitem.name}`} />\n\n                        <br />\n                            {menuitem.description}\n                        <br />\n                    </ListGroup.Item>\n                    ))}\n                </ListGroup>\n            </div>\n\n        </React.Fragment>\n        \n        \n    )\n}\n\nexport default Restaurant","import React from 'react';\nimport {Switch, Route} from 'react-router-dom'\nimport Cards from '../Card/Card'\nimport CardMenus from '../CardMenu/CardMenu'\nimport Navbars from '../Navbar/Navbar'\nimport SearchResults from '../SearchResults/SearchResults'\nimport Restaurant from '../Restaurant/Restaurant';\n\nconst App = () => {\n    return (\n        <React.Fragment>\n          \n          <Navbars />\n          <Route path=\"/restaurants/:id\" exact component={Restaurant} />\n          <Route path=\"/menuitems\" exact component={CardMenus} />\n          <Route path=\"/restaurants\" exact component={Cards} />\n          <Route path=\"/search/:term\" component={SearchResults} />\n        \n        </React.Fragment>\n        \n    );\n};\n\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_APOLLO_SERVER || 'http://localhost:4000',\n});\n\nconst root = (\n  <Router>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Router>\n);\n\nReactDOM.render(root, document.getElementById('root'));"],"sourceRoot":""}